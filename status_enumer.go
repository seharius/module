// Code generated by "enumer -type=Status"; DO NOT EDIT.

package module

import (
	"fmt"
	"strings"
)

const _StatusName = "startingrunningfailed"

var _StatusIndex = [...]uint8{0, 8, 15, 21}

const _StatusLowerName = "startingrunningfailed"

func (i Status) String() string {
	if i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[starting-(0)]
	_ = x[running-(1)]
	_ = x[failed-(2)]
}

var _StatusValues = []Status{starting, running, failed}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:8]:        starting,
	_StatusLowerName[0:8]:   starting,
	_StatusName[8:15]:       running,
	_StatusLowerName[8:15]:  running,
	_StatusName[15:21]:      failed,
	_StatusLowerName[15:21]: failed,
}

var _StatusNames = []string{
	_StatusName[0:8],
	_StatusName[8:15],
	_StatusName[15:21],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}
